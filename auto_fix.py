#!/usr/bin/env python3
"""
Script de r√©cup√©ration automatique pour CrewAI
"""
import os
import subprocess
import sys
from dotenv import load_dotenv

load_dotenv()

def auto_fix():
    """Corrige automatiquement les probl√®mes courants"""
    print("üîß R√âCUP√âRATION AUTOMATIQUE")
    print("=" * 40)
    
    # 1. V√©rifier et corriger les d√©pendances
    print("\n1Ô∏è‚É£ V√©rification des d√©pendances...")
    try:
        import crewai
        print("   ‚úÖ crewai install√©")
    except:
        print("   üîß Installation de crewai...")
        subprocess.run([sys.executable, "-m", "pip", "install", "crewai"])
    
    try:
        import yaml
        print("   ‚úÖ pyyaml install√©")
    except:
        print("   üîß Installation de pyyaml...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyyaml"])
    
    try:
        import requests
        print("   ‚úÖ requests install√©")
    except:
        print("   üîß Installation de requests...")
        subprocess.run([sys.executable, "-m", "pip", "install", "requests"])
    
    try:
        from google.oauth2 import service_account
        print("   ‚úÖ google-auth install√©")
    except:
        print("   üîß Installation de google-auth...")
        subprocess.run([sys.executable, "-m", "pip", "install", "google-auth", "google-api-python-client"])
    
    # 2. V√©rifier et corriger le fichier .env
    print("\n2Ô∏è‚É£ V√©rification du fichier .env...")
    env_file = ".env"
    if not os.path.exists(env_file):
        print("   üîß Cr√©ation du fichier .env...")
        with open(env_file, "w") as f:
            f.write("# Configuration CrewAI\n")
            f.write("OPENAI_API_KEY=your_openai_api_key_here\n")
            f.write("MAKE_WEBHOOK_URL=https://hook.us2.make.com/cojopjk9yp1vc18zxxlryodv29qfvgqb\n")
            f.write("GOOGLE_DRIVE_CREDENTIALS_FILE=google-drive-credentials.json\n")
            f.write("GOOGLE_DRIVE_FOLDER_ID=17-oCs14_qoUrEdHGk7nflOU86SdABeO1\n")
        print("   ‚úÖ Fichier .env cr√©√©")
    else:
        print("   ‚úÖ Fichier .env existe")
    
    # 3. V√©rifier et corriger les outils
    print("\n3Ô∏è‚É£ V√©rification des outils...")
    tools_dir = "tools"
    if not os.path.exists(tools_dir):
        print("   üîß Cr√©ation du dossier tools...")
        os.makedirs(tools_dir)
    
    # 4. Test de connexion Google Drive
    print("\n4Ô∏è‚É£ Test Google Drive...")
    try:
        from tools.google_drive_tools import GoogleDriveImageSelector
        credentials_file = os.getenv("GOOGLE_DRIVE_CREDENTIALS_FILE", "google-drive-credentials.json")
        folder_id = os.getenv("GOOGLE_DRIVE_FOLDER_ID", "")
        
        if os.path.exists(credentials_file) and folder_id:
            selector = GoogleDriveImageSelector(credentials_file, folder_id)
            result = selector._run("list")
            print("   ‚úÖ Google Drive fonctionne")
        else:
            print("   ‚ö†Ô∏è Google Drive: V√©rifiez credentials et folder_id")
    except Exception as e:
        print(f"   ‚ùå Google Drive: {str(e)}")
    
    # 5. Test de connexion Make.com
    print("\n5Ô∏è‚É£ Test Make.com...")
    try:
        import requests
        webhook_url = os.getenv("MAKE_WEBHOOK_URL", "")
        if webhook_url:
            response = requests.post(
                webhook_url,
                json={"test": "connection"},
                timeout=5
            )
            if response.status_code == 200:
                print("   ‚úÖ Make.com fonctionne")
            else:
                print(f"   ‚ö†Ô∏è Make.com: Statut {response.status_code}")
        else:
            print("   ‚ö†Ô∏è Make.com: URL non configur√©e")
    except Exception as e:
        print(f"   ‚ùå Make.com: {str(e)}")
    
    # 6. Recommandations finales
    print("\n6Ô∏è‚É£ Recommandations:")
    print("   üìã Si Google Drive ne fonctionne pas:")
    print("      - V√©rifiez que le dossier est partag√© avec le Service Account")
    print("      - V√©rifiez que les credentials sont corrects")
    print("   üìã Si Make.com ne fonctionne pas:")
    print("      - Activez votre sc√©nario dans Make.com")
    print("      - V√©rifiez que le webhook est configur√©")
    print("   üìã Pour tester:")
    print("      - python3 main.py")
    print("      - ou python3 main_test_mode.py (mode local)")

if __name__ == "__main__":
    auto_fix() 